// <auto-generated />
using System;
using EventManagementProject.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventManagementProject.Migrations
{
    [DbContext(typeof(EventManagementContext))]
    partial class EventManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EventManagementProject.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventManagementProject.Models.PrivateQuotationRequest", b =>
                {
                    b.Property<int>("PrivateQuotationRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrivateQuotationRequestId"), 1L, 1);

                    b.Property<string>("CateringInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTiming")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpectedPeopleCount")
                        .HasColumnType("int");

                    b.Property<string>("FoodPreference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuotationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VenueType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrivateQuotationRequestId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateQuotationRequests");
                });

            modelBuilder.Entity("EventManagementProject.Models.PrivateQuotationResponse", b =>
                {
                    b.Property<int>("PrivateQuotationResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrivateQuotationResponseId"), 1L, 1);

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int>("PrivateQuotationRequestId")
                        .HasColumnType("int");

                    b.Property<double>("QuotedAmount")
                        .HasColumnType("float");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrivateQuotationResponseId");

                    b.HasIndex("PrivateQuotationRequestId")
                        .IsUnique();

                    b.ToTable("PrivateQuotationResponses");
                });

            modelBuilder.Entity("EventManagementProject.Models.PublicQuotationRequest", b =>
                {
                    b.Property<int>("PublicQuotationRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicQuotationRequestId"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuotationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TicketPrice")
                        .HasColumnType("float");

                    b.Property<string>("Timing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublicQuotationRequestId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("PublicQuotationRequests");
                });

            modelBuilder.Entity("EventManagementProject.Models.PublicQuotationResponse", b =>
                {
                    b.Property<int>("PublicQuotationResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicQuotationResponseId"), 1L, 1);

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int>("PublicQuotationRequestId")
                        .HasColumnType("int");

                    b.Property<double>("QuotedAmount")
                        .HasColumnType("float");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublicQuotationResponseId");

                    b.HasIndex("PublicQuotationRequestId")
                        .IsUnique();

                    b.ToTable("PublicQuotationResponses");
                });

            modelBuilder.Entity("EventManagementProject.Models.ScheduledPrivateEvent", b =>
                {
                    b.Property<int>("ScheduledPrivateEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduledPrivateEventId"), 1L, 1);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("PrivateQuotationRequestId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ScheduledPrivateEventId");

                    b.HasIndex("EventId");

                    b.HasIndex("PrivateQuotationRequestId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ScheduledPrivateEvents");
                });

            modelBuilder.Entity("EventManagementProject.Models.ScheduledPublicEvent", b =>
                {
                    b.Property<int>("ScheduledPublicEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduledPublicEventId"), 1L, 1);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PublicQuotationRequestId")
                        .HasColumnType("int");

                    b.Property<int>("RemainingSeats")
                        .HasColumnType("int");

                    b.Property<string>("UserEventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ScheduledPublicEventId");

                    b.HasIndex("EventId");

                    b.HasIndex("PublicQuotationRequestId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ScheduledPublicEvents");
                });

            modelBuilder.Entity("EventManagementProject.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScheduledPublicEventId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("ScheduledPublicEventId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("EventManagementProject.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventManagementProject.Models.UserCredential", b =>
                {
                    b.Property<int>("UserCredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCredentialId"), 1L, 1);

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserCredentialId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserCredentials");
                });

            modelBuilder.Entity("EventManagementProject.Models.PrivateQuotationRequest", b =>
                {
                    b.HasOne("EventManagementProject.Models.Event", "Event")
                        .WithMany("PrivateQuotationRequests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventManagementProject.Models.User", "User")
                        .WithMany("PrivateQuotationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventManagementProject.Models.PrivateQuotationResponse", b =>
                {
                    b.HasOne("EventManagementProject.Models.PrivateQuotationRequest", "PrivateQuotationRequest")
                        .WithOne("PrivateQuotationResponse")
                        .HasForeignKey("EventManagementProject.Models.PrivateQuotationResponse", "PrivateQuotationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateQuotationRequest");
                });

            modelBuilder.Entity("EventManagementProject.Models.PublicQuotationRequest", b =>
                {
                    b.HasOne("EventManagementProject.Models.Event", "Event")
                        .WithMany("PublicQuotationRequests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventManagementProject.Models.User", "User")
                        .WithMany("PublicQuotationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventManagementProject.Models.PublicQuotationResponse", b =>
                {
                    b.HasOne("EventManagementProject.Models.PublicQuotationRequest", "PublicQuotationRequest")
                        .WithOne("PublicQuotationResponse")
                        .HasForeignKey("EventManagementProject.Models.PublicQuotationResponse", "PublicQuotationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicQuotationRequest");
                });

            modelBuilder.Entity("EventManagementProject.Models.ScheduledPrivateEvent", b =>
                {
                    b.HasOne("EventManagementProject.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagementProject.Models.PrivateQuotationRequest", "PrivateQuotationRequest")
                        .WithOne("ScheduledPrivateEvent")
                        .HasForeignKey("EventManagementProject.Models.ScheduledPrivateEvent", "PrivateQuotationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventManagementProject.Models.User", "User")
                        .WithMany("ScheduledPrivateEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("PrivateQuotationRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventManagementProject.Models.ScheduledPublicEvent", b =>
                {
                    b.HasOne("EventManagementProject.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagementProject.Models.PublicQuotationRequest", "PublicQuotationRequest")
                        .WithOne("ScheduledPublicEvent")
                        .HasForeignKey("EventManagementProject.Models.ScheduledPublicEvent", "PublicQuotationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventManagementProject.Models.User", "User")
                        .WithMany("ScheduledPublicEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("PublicQuotationRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventManagementProject.Models.Ticket", b =>
                {
                    b.HasOne("EventManagementProject.Models.ScheduledPublicEvent", "ScheduledPublicEvent")
                        .WithMany("Tickets")
                        .HasForeignKey("ScheduledPublicEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventManagementProject.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduledPublicEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventManagementProject.Models.UserCredential", b =>
                {
                    b.HasOne("EventManagementProject.Models.User", "User")
                        .WithOne("UserCredential")
                        .HasForeignKey("EventManagementProject.Models.UserCredential", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventManagementProject.Models.Event", b =>
                {
                    b.Navigation("PrivateQuotationRequests");

                    b.Navigation("PublicQuotationRequests");
                });

            modelBuilder.Entity("EventManagementProject.Models.PrivateQuotationRequest", b =>
                {
                    b.Navigation("PrivateQuotationResponse")
                        .IsRequired();

                    b.Navigation("ScheduledPrivateEvent")
                        .IsRequired();
                });

            modelBuilder.Entity("EventManagementProject.Models.PublicQuotationRequest", b =>
                {
                    b.Navigation("PublicQuotationResponse")
                        .IsRequired();

                    b.Navigation("ScheduledPublicEvent")
                        .IsRequired();
                });

            modelBuilder.Entity("EventManagementProject.Models.ScheduledPublicEvent", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("EventManagementProject.Models.User", b =>
                {
                    b.Navigation("PrivateQuotationRequests");

                    b.Navigation("PublicQuotationRequests");

                    b.Navigation("ScheduledPrivateEvents");

                    b.Navigation("ScheduledPublicEvents");

                    b.Navigation("Tickets");

                    b.Navigation("UserCredential")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
